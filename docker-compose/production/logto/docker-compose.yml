name: ChatDB
services:
  postgre:
    image: pgvector/pgvector:pg17
    container_name: chat-postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U JOY"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - '5432:5432'
    volumes:
      - './data:/var/lib/postgresql/data'
    env_file:
      - .env

    restart: always
    networks:
      chat-network:
        aliases:
          - chat-postgres
          - postgre

  minio:
    image: minio/minio
    container_name: chat-minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - './s3_data:/etc/minio/data'
    env_file:
      - .env
    restart: always
    command: >
      server /etc/minio/data --address ":9000" --console-address ":9001"
    networks:
      - chat-network


  logto:
    image: svhd/logto
    container_name: chat-logto
    ports:
      - '3001:3001'
      - '3002:3002'
    depends_on:
      postgre:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - CORS_ALLOW_ORIGIN=http://localhost:3002,https://db-chat.joy.box
      - ALLOWED_ORIGINS=http://localhost:3002,https://db-chat.joy.box
      - CORS_ORIGIN=http://localhost:3002,https://db-chat.joy.box
      - CORS_ALLOWED_ORIGINS=http://localhost:3002,https://db-chat.joy.box
      - CORS_ALLOW_ORIGINS=http://localhost:3002,https://db-chat.joy.box
    entrypoint: ['sh', '-c', 'npm run cli db seed -- --swe && npm start']
    restart: always
    networks:
      - chat-network

  searxng:
    image: searxng/searxng
    container_name: chat-searxng
    environment:
      - 'SEARXNG_SETTINGS_FILE=/etc/searxng/settings.yml'
    restart: always
    networks:
      - chat-network
    env_file:
      - .env

  lobe:
    image: lobehub/lobe-chat-database
    container_name: chat-lobe
    ports:
      - '3210:3210'
    env_file:
      - .env
    networks:
      - chat-network
    depends_on:
      - postgre

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    volumes:
      - ./cloudflared-config-fixed.yml:/etc/cloudflared/config.yml:ro
    env_file:
      - .env
    depends_on:
      - postgre
      - minio
      - logto
    networks:
      - chat-network

volumes:
  data:
    driver: local
  s3_data:
    driver: local

networks:
  chat-network:
    driver: bridge
